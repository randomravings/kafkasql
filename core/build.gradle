plugins {
  id 'java'
  id 'antlr'
}

group = 'kafka-sql'
version = '0.1.0'

configurations { ebnfConvert }

dependencies {
  antlr 'org.antlr:antlr4:4.13.2'
  implementation 'org.antlr:antlr4-runtime:4.13.2'
  implementation 'org.codehaus.groovy:groovy:3.0.21'

  // JUnit 5: API for compilation, engine + launcher for runtime
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.3'

  testImplementation 'com.google.jimfs:jimfs:1.3.0'
  ebnfConvert 'de.bottlecaps.ebnf-convert:ebnf-convert-webapp:0.72'
}

def antlrLexerOut  = file("$buildDir/generated-src/antlr/kafkasql/core/lex")
def antlrParserOut = file("$buildDir/generated-src/antlr/kafkasql/core/parse")

tasks.register('generateLexerSource', org.gradle.api.plugins.antlr.AntlrTask) {
  description = "Generate lexer sources"
  group = "antlr"
  source = files('src/main/antlr/SqlStreamLexer.g4')
  outputDirectory = antlrLexerOut
  arguments += ['-visitor','-long-messages','-package','kafkasql.core.lex']
  maxHeapSize = '256m'
}

tasks.register('generateParserSource', org.gradle.api.plugins.antlr.AntlrTask) {
  description = "Generate parser sources"
  group = "antlr"
  dependsOn 'generateLexerSource'
  source = files('src/main/antlr/SqlStreamParser.g4')
  inputs.files(fileTree(antlrLexerOut))
  outputDirectory = antlrParserOut
  arguments += [
    '-visitor','-long-messages','-package','kafkasql.core.parse',
    '-lib', antlrLexerOut.absolutePath
  ]
  maxHeapSize = '256m'
}

tasks.named('compileJava').configure { dependsOn 'generateParserSource' }
tasks.named('compileTestJava').configure { dependsOn 'generateParserSource' }

sourceSets {
  main { java.srcDirs += "$buildDir/generated-src/antlr" }
  test { java.srcDirs += "$buildDir/generated-src/antlr" }
}

test {
  useJUnitPlatform()
  failOnNoDiscoveredTests = false
  testLogging {
    events "started", "passed", "skipped", "failed"
    exceptionFormat "full"
    showStandardStreams = true
  }
}